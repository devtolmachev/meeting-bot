from aiogram.exceptions import TelegramBadRequest
from aiogram.filters.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from src.database.questionnaires import Questionnaire
from src.database.user import AllUsers
from src.etc.bot import bot, admin_id, dp
from src.markups import *


class WatchQuestionnaire(StatesGroup):
    wait_message = State()
    main = State()


async def check_and_replace_photo_url(messages: list[Message], questionnaire: Questionnaire):
    if isinstance(questionnaire.photos_id.get('photo'), list) and \
            any([not photo.count('://') for photo in questionnaire.photos_id["photo"]]):
        return
    if isinstance(questionnaire.photos_id.get('video'), list) and \
            any([not photo.count('://') for photo in questionnaire.photos_id["video"]]):
        return

    medias = {}
    user = User(questionnaire.id)
    for msg in messages:
        if msg.photo:
            if not medias.get('photo'):
                medias["photo"] = []
            medias["photo"].append(msg.photo[-1].file_id)
        elif msg.video:
            if not medias.get('video'):
                medias["video"] = []
            medias["video"].append(msg.video.file_id)

    await user.change_photos(photos_id=medias)


async def watch_questionnaires_loop(msg: Message,
                                    state: FSMContext,
                                    custom_questionnaire: list[Questionnaire] = None,
                                    only_send: bool = True):
    if msg.text == 'üí§':
        await state.clear()
        text = (f"1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n"
                f"2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n"
                f"3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.\n"
                f"4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n"
                f"5. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É")
        return await bot.send_message(msg.from_user.id, text, reply_markup=get_general_keyboard(5))

    user = User(msg.from_user.id)
    data = await state.get_data()

    previous_questionnaire: Questionnaire = data.get("previous_questionnaire")
    content_type: str = data.get("content_type")

    if content_type == 'messages':
        messages: list[dict[str, int]] = (await state.get_data()).get("messages")
    elif content_type == 'likes':
        likes: list[dict[str, int]] = (await state.get_data()).get("likes")

    if msg.text == '‚ù§Ô∏è':
        if previous_questionnaire.username != '@test_username':
            if await user.is_too_active_to_me('like', previous_questionnaire.id):
                await user.delete_like_for_me(previous_questionnaire.id)
                text = (f'–ö–∞–∂–µ—Ç—Å—è –º—ã —Å–≤–µ–ª–∏ –≤–∞—Å –∫–æ–µ —Å –∫–µ–º. –≠—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –Ω–µ–¥–∞–≤–Ω–æ —Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫.\n\n'
                        f'–¢–∞–∫ —á—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É @{msg.from_user.username}, —Ç—É—Ç –Ω–µ—á–µ–≥–æ —Å—Ç–µ—Å–Ω—è—Ç—å—Å—è')
                kb = None
                await bot.send_message(msg.from_user.id, f'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å '
                                                         f'@{previous_questionnaire.username}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ç–æ–∂–µ '
                                                         f'–ø—Ä–æ—è–≤–ª—è–ª –∑–Ω–∞–∫–∏ –≤–Ω–∏–º–∞–Ω–∏—è –∫ –≤–∞–º')
            else:
                text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –ª–∞–π–∫, –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –∞–Ω–∫–µ—Ç—É?"
                kb = show_likes_for_me_markup()
                await user.set_like_for(previous_questionnaire.id)

            await bot.send_message(previous_questionnaire.id, text, reply_markup=kb)

    elif msg.text == 'üíå':
        text = '–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ.'
        kb = ReplyKeyboardBuilder()
        kb.add(get_cancel_btn())

        await bot.send_message(msg.from_user.id, text, reply_markup=kb.as_markup(resize_keyboard=True))

        await state.set_state(WatchQuestionnaire.wait_message)
        return await state.update_data(questionnaire_msg_user=previous_questionnaire)

    elif msg.text == 'üëé':
        if content_type == 'messages':
            await user.delete_message_for_me(user_id=previous_questionnaire.id)
        elif content_type == 'likes':
            await user.delete_like_for_me(user_id=previous_questionnaire.id)

    elif only_send is False:
        return await bot.send_message(msg.from_user.id, "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")

    custom_questionnaires: list[Questionnaire] = (await state.get_data()).get("custom_questionnaires")
    if custom_questionnaires:
        questionnaire = custom_questionnaires[0]
        custom_questionnaires.pop(0)
        await state.update_data(custom_questionnaires=custom_questionnaires)

    else:
        skip: list = (await state.get_data()).get("skip_questionnaires_ids") or []
        try:
            all_questionnaires = await AllUsers().get_users_questionnaires(
                my_user_id=msg.from_user.id, skip=skip
            )

            questionnaire = all_questionnaires[0]
        except IndexError:
            await bot.send_message(
                msg.from_user.id,
                "–ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —á–∞—Å–æ–≤"
            )
            return await reset_questionnaires(msg=msg, state=state)
        skip.append(questionnaire.id)
        await state.update_data(skip_questionnaires_ids=skip)

    await state.update_data(previous_questionnaire=questionnaire)

    if not (await state.get_data()).get("custom_questionnaires") and (await state.get_data()).get("content_type"):
        if content_type == 'messages':
            word = '–°–æ–æ–±—â–µ–Ω–∏—è'

        elif content_type == 'likes':
            word = '–õ–∞–π–∫–∏'

        await bot.send_message(msg.from_user.id, f"{word} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ –æ–Ω–∏ –µ—â–µ –±—É–¥—É—Ç!")
        return await reset_questionnaires(msg=msg, state=state)

    else:
        try:
            msgs = await bot.send_media_group(msg.from_user.id, questionnaire.get_questionnaire().build())
        except TelegramBadRequest as tbr:
            await bot.send_message(msg.from_user.id, "–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É, —Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é")
            raise tbr
        else:
            await check_and_replace_photo_url(messages=msgs, questionnaire=questionnaire)
            await bot.send_message(msg.from_user.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–∫–µ—Ç—É",
                                   reply_markup=get_complaint_report_mp(questionnaire.id).as_markup())

    if content_type == 'messages' and messages:
        await bot.send_message(msg.from_user.id, messages[0]["message"])
        messages.pop(0)
        await state.update_data(messages=messages)
    elif content_type == 'likes' and likes:
        likes.pop(0)
        await state.update_data(likes=likes)


@dp.callback_query(lambda call: call.data.startswith('complaint_for'))
async def complaint_on_questionnaire(call: CallbackQuery):
    questionnaire_id = int(call.data.split('complaint_for_')[1])
    questionnaire_msg = call.message

    await call.message.edit_text(
        questionnaire_msg.text,
        reply_markup=get_choice_complaint(questionnaire_id).as_markup()
    )


@dp.callback_query(lambda call: call.data.startswith("block_report"))
async def block_report_questionnaire(call: CallbackQuery):
    user_id = int(call.data.split('_')[-1])
    questionnaire = await AllUsers().get_questionnaire_by_id(user_id)

    if call.data.count('strangers_indecent_photos'):
        cause = "<b> –ß—É–∂–∏–µ –∏–ª–∏ –Ω–µ –ø—Ä–∏–ª–∏—á–Ω—ã–µ —Ñ–æ—Ç–æ</b>"
        callback_data_clause = 'strangers_indecent_photos'
    elif call.data.count('rudeness_in_description'):
        cause = "<b>ü§¨ –ì—Ä—É–±–æ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏</b>"
        callback_data_clause = 'rudeness_in_description'
    elif call.data.count('rudeness_in_communication'):
        cause = "<b>üí¢ –ì—Ä—É–±–æ—Å—Ç—å –≤ –æ–±—â–µ–Ω–∏–∏</b>"
        callback_data_clause = 'rudeness_in_communication'

    text = f'–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ –∞–Ω–∫–µ—Ç—É:\n' \
           f'–ü—Ä–∏—á–∏–Ω–∞: <i>{cause}</i>'

    msg = await bot.send_message(
        chat_id=admin_id,
        text=text,
        reply_markup=get_freeze_questionnaire_mp(user_id, callback_data_clause).as_markup()
    )

    await bot.pin_chat_message(admin_id, msg.message_id)
    await bot.send_media_group(admin_id, questionnaire.get_questionnaire().build())


async def reset_questionnaires(msg: Message, state: FSMContext):
    await state.clear()
    text = (f"1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n"
            f"2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n"
            f"3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.\n"
            f"4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n"
            f"5. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É")
    await bot.send_message(msg.from_user.id, text, reply_markup=get_general_keyboard(5))


async def wait_for_message(msg: Message, state: FSMContext):
    questionnaire = (await state.get_data())["questionnaire_msg_user"]
    user = User(msg.from_user.id)

    if msg.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        data: dict = (await state.get_data())
        data.pop('questionnaire_msg_user')

        await state.set_data(data)
        await state.set_state(WatchQuestionnaire.main)
        await bot.send_message(msg.from_user.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_watch_questionnaire_markup())
        await watch_questionnaires_loop(msg=msg, state=state)

    else:
        if len(msg.text) <= 3:
            return await bot.send_message(msg.from_user.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")

        text_for_watcher = "–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞"
        if questionnaire.username != '@test_username':
            if await user.is_too_active_to_me('message', questionnaire.id):
                await user.delete_like_for_me(questionnaire.id)
                await user.delete_message_for_me(questionnaire.id)
                text = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –≤—Å—Ç—Ä–µ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! "
                        f"–ï—Å—Ç—å –≤–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å.\n–ê –≤–æ—Ç –∫—Å—Ç–∞—Ç–∏ –∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
                        f"<b>{msg.text}</b>")
                kb = None
            else:
                await user.set_message_for(questionnaire.id, msg.text)
                text = "–¢–µ–±–µ –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑–∞—Ç—å?"
                kb = show_messages_for_me_markup()

            await bot.send_message(questionnaire.id, text, reply_markup=kb)
            text_for_watcher = (f'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å @{questionnaire.username}, '
                                f'—Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ç–æ–∂–µ –ø—Ä–æ—è–≤–ª—è–ª –∑–Ω–∞–∫–∏ –≤–Ω–∏–º–∞–Ω–∏—è –∫ –≤–∞–º')

        await state.set_state(WatchQuestionnaire.main)
        kb = get_watch_questionnaire_markup()
        await bot.send_message(msg.from_user.id, text_for_watcher, reply_markup=kb)
        await watch_questionnaires_loop(msg=msg, state=state)


def register_watch_questionnaire_handlers():
    dp.message.register(watch_questionnaires_loop, WatchQuestionnaire.main)
    dp.message.register(wait_for_message, WatchQuestionnaire.wait_message)
